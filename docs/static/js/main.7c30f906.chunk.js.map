{"version":3,"sources":["components/ScoreBoard.tsx","components/HistoryModalTable.tsx","components/Game.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["ScoreBoard","props","players","onDelete","onSubtract","onAdd","onAllIn","onPlayerWin","columns","key","name","fieldName","minWidth","onRender","item","Stack","horizontal","verticalFill","verticalAlign","ActionButton","iconProps","iconName","onClick","_","Text","tokens","childrenGap","coins","subtractedCoins","disabled","isAllInClicked","text","style","color","DetailsList","items","selectionMode","HistoryModalTable","playersHistory","map","p","Game","useState","setPlayers","totalRoundCoins","setTotalRoundCoins","baseCoins","setBaseCoins","addPlayerValue","setAddPlayerValue","allInCoins","setAllInCoins","roundNumber","setRoundNumber","isHistoryModalOpen","setIsHistoryModalOpen","historyItems","setHistoryItems","variant","horizontalAlign","TextField","placeholder","value","onChange","v","DefaultButton","concat","history","toString","Number","Separator","margin","slice","splice","findIndex","updatedPlayers","newPlayer","find","val","updatedHistory","historyObject","push","n","c","Modal","isOpen","onDismiss","App","Boolean","window","location","hostname","match","initializeIcons","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7c30f906.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport {\r\n  Text,\r\n  Stack,\r\n  Persona,\r\n  PersonaSize,\r\n  DetailsList,\r\n  IDetailsRowProps,\r\n  IColumn,\r\n  Icon,\r\n  ActionButton\r\n} from \"office-ui-fabric-react\";\r\n\r\nexport type Player = {\r\n  name: string;\r\n  coins: number;\r\n  subtractedCoins:number;\r\n  isAllInClicked?: boolean;\r\n  isKing?: boolean;\r\n  isCoze?: boolean;\r\n  history: number[];\r\n};\r\n\r\nexport type ScoreBoardProps = {\r\n  players: Player[];\r\n  onDelete: (name: string) => void;\r\n  onSubtract: (name: string) => void;\r\n  onAdd: (name: string) => void;\r\n  onAllIn: (name: string) => void;\r\n  onPlayerWin: (name: string) => void;\r\n};\r\n\r\nexport const ScoreBoard = (props: ScoreBoardProps) => {\r\n  const { players, onDelete, onSubtract,onAdd, onAllIn, onPlayerWin } = props;\r\n\r\n  const columns: IColumn[] = [\r\n    {\r\n      key: \"playerName\",\r\n      name: \"Name\",\r\n      fieldName: \"name\",\r\n      minWidth: 50,\r\n      onRender: (item: any) => (\r\n        <Stack horizontal verticalFill verticalAlign=\"center\">\r\n          <ActionButton\r\n            iconProps={{ iconName: \"Delete\" }}\r\n            onClick={_ => onDelete(item.name)}\r\n          />\r\n          <Text>{item.name}</Text>\r\n        </Stack>\r\n      )\r\n    },\r\n    {\r\n      key: \"coin\",\r\n      name: \"Coins\",\r\n      fieldName: \"coins\",\r\n      minWidth: 250,\r\n      onRender: (item: any) => (\r\n        <Stack\r\n          horizontal\r\n          tokens={{ childrenGap: 5 }}\r\n          verticalAlign=\"center\"\r\n          verticalFill\r\n        >\r\n          <Text>{item.coins}( {item.subtractedCoins} )</Text>\r\n          <ActionButton\r\n            iconProps={{ iconName: \"BoxSubtractSolid\" }}\r\n            onClick={_ => onSubtract(item.name)}\r\n          />\r\n          <ActionButton\r\n            iconProps={{ iconName: \"BoxAdditionSolid\" }}\r\n            onClick={_ => onAdd(item.name)}\r\n            disabled={item.subtractedCoins>=0}\r\n          />\r\n          <ActionButton\r\n            iconProps={{ iconName: \"LightningBolt\" }}\r\n            onClick={_ => {\r\n              onAllIn(item.name);\r\n            }}\r\n            disabled={item.isAllInClicked}\r\n          />\r\n          <ActionButton\r\n            text=\"Win\"\r\n            style={{ color: \"green\" }}\r\n            onClick={_ => {\r\n              onPlayerWin(item.name);\r\n            }}\r\n          />\r\n        </Stack>\r\n      )\r\n    }\r\n  ];\r\n\r\n  return <DetailsList items={players} columns={columns} selectionMode={0} />;\r\n};\r\n\r\n// <Stack\r\n//   horizontal\r\n//   verticalAlign=\"center\"\r\n//   verticalFill\r\n//   tokens={{ childrenGap: 5 }}\r\n// >\r\n//   <Persona text={name} size={PersonaSize.size56} />\r\n//   <Text variant=\"medium\">{coins}</Text>\r\n// </Stack>\r\n","import React, { useState } from \"react\";\r\nimport {\r\n  Text,\r\n  Stack,\r\n  Persona,\r\n  PersonaSize,\r\n  DetailsList,\r\n  IDetailsRowProps,\r\n  IColumn,\r\n  Icon,\r\n  ActionButton\r\n} from \"office-ui-fabric-react\";\r\nimport { Player } from \"./ScoreBoard\";\r\nimport { HistoryItem } from \"./Game\";\r\n\r\n\r\nexport type HistoryModalTableProps = {\r\n  playersHistory: HistoryItem[];\r\n  players: Player[]\r\n};\r\n\r\nexport const HistoryModalTable = (props: HistoryModalTableProps) => {\r\n  const { playersHistory, players } = props;\r\n\r\n  const columns: IColumn[] = \r\n  players.map(p=>({\r\n        key: p.name,\r\n        name: p.name,\r\n        fieldName: p.name,\r\n        minWidth: 100,\r\n  }))\r\n\r\n  return <DetailsList items={playersHistory} columns={columns} selectionMode={0} />;\r\n};","import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Text,\r\n  Stack,\r\n  DefaultButton,\r\n  TextField,\r\n  Separator,\r\n  Modal,\r\n  ActionButton,\r\n  DetailsList\r\n} from \"office-ui-fabric-react\";\r\nimport { Player, ScoreBoard } from \"./ScoreBoard\";\r\nimport { HistoryModalTable } from \"./HistoryModalTable\";\r\n\r\n\r\nexport type HistoryItem =  {[key: string]: number}\r\nconst startingCoins = 100000;\r\nexport const Game: React.FC = () => {\r\n  const [players, setPlayers] = useState<Player[]>([]);\r\n  const [totalRoundCoins, setTotalRoundCoins] = useState<number>(0);\r\n  const [baseCoins, setBaseCoins] = useState<number>(1000);\r\n  const [addPlayerValue, setAddPlayerValue] = useState(\"\");\r\n  const [allInCoins, setAllInCoins] = useState<number>(9000);\r\n  const [roundNumber, setRoundNumber] = useState<number>(1);\r\n  const [isHistoryModalOpen, setIsHistoryModalOpen] = useState<boolean>(false);\r\n  const [historyItems, setHistoryItems] = useState<HistoryItem[]>([])\r\n\r\n  const onAddPlayer = () => {\r\n    setPlayers(players =>\r\n      players.concat({\r\n        name: addPlayerValue,\r\n        coins: startingCoins,\r\n        isAllInClicked: false,\r\n        subtractedCoins: 0,\r\n        history: []\r\n      })\r\n    );\r\n    setAddPlayerValue(\"\");\r\n  };\r\n\r\n  const onDelete = (name: String) => {\r\n    setPlayers(players => {\r\n      const items = players.slice();\r\n      items.splice(\r\n        players.findIndex(p => p.name === name),\r\n        1\r\n      );\r\n      return items;\r\n    });\r\n  };\r\n\r\n  const onSubtract = (name: string) => {\r\n    const updatedPlayers = players.slice();\r\n    const newPlayer = updatedPlayers.find(p => p.name === name);\r\n    if (newPlayer) {\r\n      newPlayer.coins -= baseCoins;\r\n      newPlayer.subtractedCoins -= baseCoins;\r\n    }\r\n    setPlayers(updatedPlayers);\r\n    setTotalRoundCoins(val => val + baseCoins);\r\n  };\r\n  const onAdd = (name: string) => {\r\n    const updatedPlayers = players.slice();\r\n    const newPlayer = updatedPlayers.find(p => p.name === name);\r\n    if (newPlayer) {\r\n      newPlayer.coins += baseCoins;\r\n      newPlayer.subtractedCoins += baseCoins;\r\n    }\r\n    setPlayers(updatedPlayers);\r\n    setTotalRoundCoins(val => val - baseCoins);\r\n  };\r\n  const onAllIn = (name: string) => {\r\n    const updatedPlayers = players.slice();\r\n    const newPlayer = updatedPlayers.find(p => p.name === name);\r\n    if (newPlayer) {\r\n      newPlayer.coins -= allInCoins;\r\n      newPlayer.isAllInClicked = true;\r\n      newPlayer.subtractedCoins -= allInCoins;\r\n    }\r\n    setPlayers(updatedPlayers);\r\n    setTotalRoundCoins(val => val + allInCoins);\r\n  };\r\n\r\n  const onPlayerWin = (name: string) => {\r\n    const updatedPlayers = players.slice();\r\n    const newPlayer = updatedPlayers.find(p => p.name === name);\r\n    if (newPlayer) {\r\n      newPlayer.coins += totalRoundCoins;\r\n    }\r\n    setPlayers(\r\n      updatedPlayers.map(p => ({\r\n        ...p,\r\n        history:\r\n          p.name === name\r\n            ? [...p.history, totalRoundCoins]\r\n            : [...p.history, p.subtractedCoins],\r\n        subtractedCoins: 0,\r\n        isAllInClicked: false\r\n      }))\r\n    );\r\n    const updatedHistory = historyItems.slice();\r\n    const historyObject: HistoryItem= {}\r\n    players.map(p=>{\r\n        const key = p.name;\r\n        historyObject[key] = p.coins;\r\n    })\r\n    updatedHistory.push(historyObject);\r\n    setHistoryItems(updatedHistory)\r\n    setTotalRoundCoins(0);\r\n    setRoundNumber(n => n + 1);\r\n    if (roundNumber % 10 == 0) {\r\n      setBaseCoins(c => c * 2);\r\n      setAllInCoins(c => c * 2);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Text variant=\"xxLarge\">POKER CALCULATOR</Text>\r\n      <Stack horizontal horizontalAlign=\"center\" tokens={{ childrenGap: 5 }}>\r\n        <TextField\r\n          placeholder=\"Add player\"\r\n          value={addPlayerValue}\r\n          onChange={(_, v) => setAddPlayerValue(v || \"\")}\r\n        ></TextField>\r\n        <DefaultButton iconProps={{ iconName: \"add\" }} disabled={!addPlayerValue} onClick={onAddPlayer} />\r\n      </Stack>\r\n\r\n      <Text variant=\"xxLargePlus\">\r\n        {totalRoundCoins ? totalRoundCoins : \"0\"}\r\n      </Text>\r\n      <Text variant=\"large\">Base: {baseCoins}</Text>\r\n      <Text variant=\"large\"># Round: {roundNumber}</Text>\r\n      <TextField\r\n        placeholder=\"set all in value\"\r\n        value={allInCoins.toString()}\r\n        onChange={(_, v) => setAllInCoins(Number(v) || 0)}\r\n      ></TextField>\r\n      <Separator />\r\n\r\n      <Stack tokens={{ childrenGap: 20 }} style={{ margin: \"15px\" }}>\r\n        <ScoreBoard\r\n          players={players}\r\n          onDelete={onDelete}\r\n          onSubtract={onSubtract}\r\n          onAdd={onAdd}\r\n          onAllIn={onAllIn}\r\n          onPlayerWin={onPlayerWin}\r\n        />\r\n      </Stack>\r\n\r\n      <ActionButton text=\"History\" onClick={_ => setIsHistoryModalOpen(true)} />\r\n      <Modal\r\n        isOpen={isHistoryModalOpen}\r\n        onDismiss={() => setIsHistoryModalOpen(false)}\r\n      >\r\n        <HistoryModalTable players={players} playersHistory={historyItems}></HistoryModalTable>\r\n      </Modal>\r\n    </>\r\n  );\r\n};\r\n","import React from \"react\";\nimport { Game } from \"./components/Game\";\n\nconst App: React.FC = () => {\n  return (<Game/>);\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { initializeIcons } from '@uifabric/icons';\n\ninitializeIcons();\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}